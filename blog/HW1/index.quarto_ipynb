{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"A Replication of Karlan and List (2007)\"\n",
        "author: \"Wei Zhou\"\n",
        "date: today\n",
        "callout-appearance: minimal # this hides the blue \"i\" icon on .callout-notes\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2).\n",
        "\n",
        "The experiment aimed to evaluate how different fundraising strategies influence donor behavior. The standard letter served as a baseline, while the matching grant letter offered to match donations at a specific ratio, and the challenge grant letter set a fundraising goal that needed to be met for the funds to be unlocked. These treatments were designed to test the psychological and economic factors that motivate charitable giving, such as reciprocity, social pressure, and perceived impact.\n",
        "\n",
        "The study measured key outcomes, including the likelihood of donating and the amount donated, to assess the effectiveness of each treatment. By randomly assigning participants to treatment groups, the researchers ensured that any observed differences in outcomes could be attributed to the fundraising strategy rather than external factors. This rigorous design allowed them to draw causal inferences about the impact of the treatments on donor behavior.\n",
        "\n",
        "This project seeks to replicate their results.\n",
        "\n",
        "\n",
        "## Data\n",
        "\n",
        "### Description\n"
      ],
      "id": "b5d8873d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_stata(\"karlan_list_2007.dta\")\n",
        "\n",
        "# Display basic information about the dataset\n",
        "print(\"Dataset Overview:\")\n",
        "print(df.info())\n",
        "\n",
        "# Summary statistics\n",
        "print(\"\\nSummary Statistics:\")\n",
        "print(df.describe())"
      ],
      "id": "d8762ff0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::: {.callout-note collapse=\"true\"}\n",
        "### Variable Definitions\n",
        "\n",
        "| Variable             | Description                                                         |\n",
        "|----------------------|---------------------------------------------------------------------|\n",
        "| `treatment`          | Treatment                                                           |\n",
        "| `control`            | Control                                                             |\n",
        "| `ratio`              | Match ratio                                                         |\n",
        "| `ratio2`             | 2:1 match ratio                                                     |\n",
        "| `ratio3`             | 3:1 match ratio                                                     |\n",
        "| `size`               | Match threshold                                                     |\n",
        "| `size25`             | \\$25,000 match threshold                                            |\n",
        "| `size50`             | \\$50,000 match threshold                                            |\n",
        "| `size100`            | \\$100,000 match threshold                                           |\n",
        "| `sizeno`             | Unstated match threshold                                            |\n",
        "| `ask`                | Suggested donation amount                                           |\n",
        "| `askd1`              | Suggested donation was highest previous contribution                |\n",
        "| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |\n",
        "| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |\n",
        "| `ask1`               | Highest previous contribution (for suggestion)                      |\n",
        "| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |\n",
        "| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |\n",
        "| `amount`             | Dollars given                                                       |\n",
        "| `gave`               | Gave anything                                                       |\n",
        "| `amountchange`       | Change in amount given                                              |\n",
        "| `hpa`                | Highest previous contribution                                       |\n",
        "| `ltmedmra`           | Small prior donor: last gift was less than median \\$35              |\n",
        "| `freq`               | Number of prior donations                                           |\n",
        "| `years`              | Number of years since initial donation                              |\n",
        "| `year5`              | At least 5 years since initial donation                             |\n",
        "| `mrm2`               | Number of months since last donation                                |\n",
        "| `dormant`            | Already donated in 2005                                             |\n",
        "| `female`             | Female                                                              |\n",
        "| `couple`             | Couple                                                              |\n",
        "| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |\n",
        "| `nonlit`             | Nonlitigation                                                       |\n",
        "| `cases`              | Court cases from state in 2004-5 in which organization was involved |\n",
        "| `statecnt`           | Percent of sample from state                                        |\n",
        "| `stateresponse`      | Proportion of sample from the state who gave                        |\n",
        "| `stateresponset`     | Proportion of treated sample from the state who gave                |\n",
        "| `stateresponsec`     | Proportion of control sample from the state who gave                |\n",
        "| `stateresponsetminc` | stateresponset - stateresponsec                                     |\n",
        "| `perbush`            | State vote share for Bush                                           |\n",
        "| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |\n",
        "| `red0`               | Red state                                                           |\n",
        "| `blue0`              | Blue state                                                          |\n",
        "| `redcty`             | Red county                                                          |\n",
        "| `bluecty`            | Blue county                                                         |\n",
        "| `pwhite`             | Proportion white within zip code                                    |\n",
        "| `pblack`             | Proportion black within zip code                                    |\n",
        "| `page18_39`          | Proportion age 18-39 within zip code                                |\n",
        "| `ave_hh_sz`          | Average household size within zip code                              |\n",
        "| `median_hhincome`    | Median household income within zip code                             |\n",
        "| `powner`             | Proportion house owner within zip code                              |\n",
        "| `psch_atlstba`       | Proportion who finished college within zip code                     |\n",
        "| `pop_propurban`      | Proportion of population urban within zip code                      |\n",
        "\n",
        "::::\n",
        "\n",
        "\n",
        "### Balance Test \n",
        "\n",
        "As an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\n"
      ],
      "id": "ed5965b8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "import statsmodels.api as sm\n",
        "\n",
        "variables_to_test = ['mrm2', 'freq', 'years']\n",
        "\n",
        "for var in variables_to_test:\n",
        "    print(f\"\\n=== Testing variable: {var} ===\")\n",
        "    group_means = df.groupby('treatment')[var].mean()\n",
        "    group_counts = df.groupby('treatment')[var].count()\n",
        "    group_vars = df.groupby('treatment')[var].var()\n",
        "    n1 = group_counts[1]  \n",
        "    n0 = group_counts[0] \n",
        "    mean1 = group_means[1]\n",
        "    mean0 = group_means[0]\n",
        "    var1 = group_vars[1]\n",
        "    var0 = group_vars[0]\n",
        "    \n",
        "    print(f\"Treatment mean: {mean1:.3f}, Control mean:{mean0:.3f}\")\n",
        "    print(f\"Treatment std: {var1**0.5:.3f}, Control variance:{var0**0.5:.3f}\")\n",
        "\n",
        "    se = np.sqrt(var1/n1 + var0/n0)\n",
        "    t_stat = (mean1 - mean0) / se\n",
        "    dfree = (var1/n1 + var0/n0)**2 / ((var1**2)/((n1**2)*(n1-1)) + (var0**2)/((n0**2)*(n0-1)))\n",
        "    p_value = 2 * (1 - stats.t.cdf(np.abs(t_stat), df=dfree))\n",
        "    print(f\"T-test: t = {t_stat:.3f}, p = {p_value:.3f}\")\n",
        "\n",
        "    X = sm.add_constant(df['treatment'])\n",
        "    y = df[var]\n",
        "    model = sm.OLS(y, X, missing='drop').fit()\n",
        "    coef = model.params['treatment']\n",
        "    pval = model.pvalues['treatment']\n",
        "    print(f\"Regression: coef = {coef:.3f}, p = {pval:.3f}\")"
      ],
      "id": "e42b691a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        " The t-test and linear regression both test for mean differences between the treatment and control groups on these baseline variables, and the results should be identical. This result is also aligned with the Table 1 in the paper.\n",
        "## Experimental Results\n",
        "\n",
        "### Charitable Contribution Made\n",
        "\n",
        "First, I analyze whether matched donations lead to an increased response rate of making a donation. \n"
      ],
      "id": "3f1994ed"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Calculate donation rates by group\n",
        "donation_rates = df.groupby('treatment')['gave'].mean()\n",
        "labels = ['Control', 'Treatment']\n",
        "\n",
        "plt.bar(labels, donation_rates)\n",
        "plt.ylabel('Proportion Donated')\n",
        "plt.title('Proportion of People Who Donated by Group')\n",
        "plt.ylim(0, donation_rates.max() * 1.2)\n",
        "plt.show()"
      ],
      "id": "31713487",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Above is the proportion of people who donated in control and treatment groups.\n",
        "\n",
        "Next, I run a t-test and a bivariate linear regression between the treatment and control groups on the binary outcome of whether any charitable donation was made.\n"
      ],
      "id": "d0dcbffe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "from scipy import stats\n",
        "\n",
        "df_clean = df[['gave', 'treatment']].dropna()\n",
        "\n",
        "gave_treatment = df_clean[df_clean['treatment'] == 1]['gave']\n",
        "gave_control = df_clean[df_clean['treatment'] == 0]['gave']\n",
        "\n",
        "t_stat, p_value = stats.ttest_ind(\n",
        "    gave_treatment,\n",
        "    gave_control,\n",
        "    equal_var=False\n",
        ")\n",
        "print(f\"T-test (scipy): t = {t_stat:.3f}, p = {p_value:.4f}\")\n",
        "\n",
        "# Linear regression\n",
        "X = sm.add_constant(df_clean['treatment'])\n",
        "y = df_clean['gave']\n",
        "model = sm.OLS(y, X).fit()\n",
        "coef = model.params['treatment']\n",
        "pval = model.pvalues['treatment']\n",
        "print(f\"Regression: coef = {coef:.3f}, p = {pval:.4f}\")"
      ],
      "id": "347c5a33",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Both the t-test and regression show whether the treatment group is more likely to donate than the control group. \n",
        "\n",
        "The p-value is small(<0.01), which means the difference is statistically significant: the matching grant treatment increases the likelihood of giving. This suggests that people are more likely to donate when their gift is matched, supporting the idea that matching grants motivate charitable behavior.\n",
        "\n",
        "\n",
        "Then, I ran a probit regression where the outcome variable is whether any charitable donation was made and the explanatory variable is assignment to treatment or control.\n"
      ],
      "id": "1b4459d9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_clean = df[['gave', 'treatment']].dropna()\n",
        "\n",
        "X = sm.add_constant(df_clean['treatment'])\n",
        "y = df_clean['gave']\n",
        "\n",
        "probit_model = sm.Probit(y, X).fit()\n",
        "\n",
        "marginal_effects = probit_model.get_margeff(at='overall')\n",
        "print(marginal_effects.summary())"
      ],
      "id": "e19a0606",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The coefficient on 'treatment' should match Table 3 column 1 in the paper. A positive and significant coefficient here means being assigned to the treatment group increases the probability of making a donation, consistent with the main findings.\n",
        "\n",
        "### Differences between Match Rates\n",
        "\n",
        "Next, I assess the effectiveness of different sizes of matched donations on the response rate.\n",
        "\n",
        "First, I used a series of t-tests to test whether the size of the match ratio has an effect on whether people donate or not between every two sizes (1:1 vs 2:1, 2:1 vs 3:1, 1:1 vs 3:1).\n"
      ],
      "id": "31494b41"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_ratio = df[(df['treatment'] == 1) & (df['ratio'].notnull()) & (df['gave'].notnull())]\n",
        "\n",
        "# 1:1 vs 2:1\n",
        "gave_1to1 = df_ratio[df_ratio['ratio'] == 1]['gave']\n",
        "gave_2to1 = df_ratio[df_ratio['ratio'] == 2]['gave']\n",
        "t_stat_12, p_val_12 = stats.ttest_ind(gave_1to1, gave_2to1, equal_var=False)\n",
        "print(f\"1:1 vs 2:1 match: t = {t_stat_12:.3f}, p = {p_val_12:.4f}\")\n",
        "\n",
        "# 2:1 vs 3:1\n",
        "gave_3to1 = df_ratio[df_ratio['ratio'] == 3]['gave']\n",
        "t_stat_23, p_val_23 = stats.ttest_ind(gave_2to1, gave_3to1, equal_var=False)\n",
        "print(f\"2:1 vs 3:1 match: t = {t_stat_23:.3f}, p = {p_val_23:.4f}\")\n",
        "\n",
        "# 1:1 vs 3:1\n",
        "t_stat_13, p_val_13 = stats.ttest_ind(gave_1to1, gave_3to1, equal_var=False)\n",
        "print(f\"1:1 vs 3:1 match: t = {t_stat_13:.3f}, p = {p_val_13:.4f}\")"
      ],
      "id": "6345b7c7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "These t-tests shows that there is no statistically significant difference in donation rates between the match ratios. \n",
        "\n",
        "This supports the authors' comment that \"neither the match thresh- old nor the example amount had a meaningful influence on behavior.\"\n",
        "\n",
        "Next, I assessed the same issue using a regression. I created the variable `ratio2`, and `ratio3`, and then regressed `gave` on them.\n"
      ],
      "id": "2f03fef8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_ratio = df[(df['treatment'] == 1) & (df['ratio'].isin([1,2,3])) & (df['gave'].notnull())]\n",
        "\n",
        "df_ratio['ratio2'] = (df_ratio['ratio'] == 2).astype(int)\n",
        "df_ratio['ratio3'] = (df_ratio['ratio'] == 3).astype(int)\n",
        "X = sm.add_constant(df_ratio[['ratio2', 'ratio3']])\n",
        "y = df_ratio['gave']\n",
        "model = sm.OLS(y, X).fit()\n",
        "print(model.summary())"
      ],
      "id": "197f26ce",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The coefficients on the dummy variables for match ratios show the difference in donation probability compared to the 1:1 match (the omitted group).\n",
        "The coefficients are small and not statistically significant, which means increasing the match ratio does not meaningfully affect the likelihood of donating.\n",
        "\n",
        "This matches the earlier t-test results and supports the paper's finding.\n",
        "\n",
        "\n",
        "I also calculated the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios in two ways --  directly from the data, and by computing the differences in the fitted coefficients of the previous regression.\n"
      ],
      "id": "17107bea"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "gave_1to1 = df_ratio[df_ratio['ratio'] == 1]['gave']\n",
        "gave_2to1 = df_ratio[df_ratio['ratio'] == 2]['gave']\n",
        "gave_3to1 = df_ratio[df_ratio['ratio'] == 3]['gave']\n",
        "\n",
        "diff_12 = gave_2to1.mean() - gave_1to1.mean()\n",
        "diff_13 = gave_3to1.mean() - gave_1to1.mean()\n",
        "diff_23 = gave_3to1.mean() - gave_2to1.mean()\n",
        "print(f\"Direct from data: Response rate difference (2:1 - 1:1): {diff_12:.4f}\")\n",
        "print(f\"Direct from data: Response rate difference (3:1 - 1:1): {diff_13:.4f}\")\n",
        "print(f\"Direct from data: Response rate difference (3:1 - 2:1): {diff_23:.4f}\")\n",
        "\n",
        "\n",
        "coef_2 = model.params['ratio2']\n",
        "coef_3 = model.params['ratio3']\n",
        "print(f\"From regression: Response rate difference (2:1 - 1:1): {coef_2:.4f}\")\n",
        "print(f\"From regression: Response rate difference (3:1 - 1:1): {coef_3:.4f}\")\n",
        "print(f\"From regression: Response rate difference (3:1 - 2:1): {(coef_3 - coef_2):.4f}\")"
      ],
      "id": "41b86b3f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Both the direct calculation and regression coefficients show that the differences in response rates between 1:1, 2:1, and 3:1 match ratios are very small and not statistically significant. This suggests that increasing the match ratio does not meaningfully increase the likelihood of donating, confirming the findings in the paper.\n",
        "\n",
        "### Size of Charitable Contribution\n",
        "\n",
        "In this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\n",
        "\n",
        "I first examined whether the treatment group gives a different average donation amount than the control group by t-test. \n"
      ],
      "id": "15c3ce9d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_amt = df[['amount', 'treatment']].dropna()\n",
        "\n",
        "amount_treat = df_amt[df_amt['treatment'] == 1]['amount']\n",
        "amount_ctrl = df_amt[df_amt['treatment'] == 0]['amount']\n",
        "t_stat, p_value = stats.ttest_ind(amount_treat, amount_ctrl, equal_var=False)\n",
        "print(f\"T-test: t = {t_stat:.3f}, p = {p_value:.4f}\")"
      ],
      "id": "9d238967",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The p-value is large (>0.05), it means there is no statistically significant difference in average donation amount between groups. This suggests that while matching grants may increase the likelihood of giving, they do not necessarily increase the average amount donated.\n",
        "\n",
        "\n",
        "Then, I limited the data to just people who made a donation and repeat the previous analysis. This regression allows me to analyze how much respondents donate conditional on donating some positive amount. \n"
      ],
      "id": "b683f5f1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_positive = df[(df['gave'] == 1) & (df['treatment'].notnull())].copy()\n",
        "\n",
        "# t-test\n",
        "amount_treat = df_positive[df_positive['treatment'] == 1]['amount']\n",
        "amount_ctrl = df_positive[df_positive['treatment'] == 0]['amount']\n",
        "t_stat, p_value = stats.ttest_ind(amount_treat, amount_ctrl, equal_var=False)\n",
        "print(f\"T-test (positive donors): t = {t_stat:.3f}, p = {p_value:.4f}\")"
      ],
      "id": "62659fb7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This analysis examines whether, among those who donated, the average donation amount differs between treatment and control groups. \n",
        "\n",
        "The treatment coefficient is not statistically significant, which suggests that matching grants do not increase the average donation size among donors—only the likelihood of giving. \n",
        "Because treatment was randomly assigned, the coefficient can be interpreted causally: it estimates the effect of being offered a match on the average donation amount, conditional on donating.\n",
        "\n",
        "Here I make two plots to show the distribution of  the donation amounts for people who donated in treatment and control groups. This also support the conclusion that matching grants do not increase the average donation size among donors—only the likelihood of giving. \n"
      ],
      "id": "0cae2cb1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df_positive = df[(df['amount'] > 0) & (df['treatment'].notnull())]\n",
        "\n",
        "amount_treat = df_positive[df_positive['treatment'] == 1]['amount']\n",
        "mean_treat = amount_treat.mean()\n",
        "\n",
        "amount_ctrl = df_positive[df_positive['treatment'] == 0]['amount']\n",
        "mean_ctrl = amount_ctrl.mean()\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n",
        "\n",
        "# Control histogram\n",
        "axes[0].hist(amount_ctrl, bins=30, color='gray', alpha=0.7)\n",
        "axes[0].axvline(mean_ctrl, color='red', linestyle='dashed', linewidth=2, label=f'Mean = {mean_ctrl:.2f}')\n",
        "axes[0].set_title('Control Group')\n",
        "axes[0].set_xlabel('Donation Amount')\n",
        "axes[0].set_ylabel('Number of Donors')\n",
        "axes[0].legend()\n",
        "\n",
        "# Treatment histogram\n",
        "axes[1].hist(amount_treat, bins=30, color='skyblue', alpha=0.7)\n",
        "axes[1].axvline(mean_treat, color='red', linestyle='dashed', linewidth=2, label=f'Mean = {mean_treat:.2f}')\n",
        "axes[1].set_title('Treatment Group')\n",
        "axes[1].set_xlabel('Donation Amount')\n",
        "axes[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ad4dda93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Simulation Experiment\n",
        "\n",
        "As a reminder of how the t-statistic \"works,\" in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\n",
        "\n",
        "Suppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made. \n",
        "\n",
        "Further suppose that the true distribution of respondents who do get a charitable donation match of any size  is Bernoulli with probability p=0.022 that a donation is made.\n",
        "\n",
        "### Law of Large Numbers\n",
        "\n",
        "To illustrate Law of Large Numbers, I simulated 100,00 draws from the control distribution and 10,000 draws from the treatment distribution. I then calculated a vector of 10,000 differences, and then plot the cumulative average of that vector of differences.\n"
      ],
      "id": "0b43f303"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(42)\n",
        "\n",
        "\n",
        "control_draws = np.random.binomial(1, 0.018, 10000)\n",
        "treatment_draws = np.random.binomial(1, 0.022, 10000)\n",
        "\n",
        "# Calculate vector of differences\n",
        "diffs = treatment_draws - control_draws\n",
        "\n",
        "# Cumulative average of differences\n",
        "cum_avg = np.cumsum(diffs) / np.arange(1, len(diffs) + 1)\n",
        "\n",
        "# True difference in means\n",
        "true_diff = 0.022 - 0.018\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(cum_avg, label='Cumulative Average of Differences')\n",
        "plt.axhline(true_diff, color='red', linestyle='--', label='True Difference in Means')\n",
        "plt.xlabel('Number of Simulations')\n",
        "plt.ylabel('Cumulative Average Difference')\n",
        "plt.title('Cumulative Average of Simulated Differences (Treatment - Control)')\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "4db3149b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This plot shows how the cumulative average of the simulated differences between treatment and control groups converges to the true difference in means as the number of simulations increases. \n",
        "\n",
        "As more samples are drawn, the cumulative average stabilizes around the true value (0.004), illustrating the Law of Large Numbers.\n",
        "\n",
        "### Central Limit Theorem\n",
        "\n",
        "To illustrate Central Limit Theorem, I made 4 histograms at sample sizes 50, 200, 500, and 1000. For each sample size, e.g. 50, I took 50 draws from each of the control and treatment distributions, and calculate the average difference between those draws. Then repeat that process 999 more times so that I had 1000 averages. \n"
      ],
      "id": "658c97c1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(42)\n",
        "\n",
        "p_control = 0.018\n",
        "p_treatment = 0.022\n",
        "sample_sizes = [50, 200, 500, 1000]\n",
        "n_reps = 1000\n",
        "\n",
        "fig, axes = plt.subplots(2, 2, figsize=(14, 10))\n",
        "axes = axes.flatten()\n",
        "\n",
        "for i, n in enumerate(sample_sizes):\n",
        "    avg_diffs = []\n",
        "    for _ in range(n_reps):\n",
        "        control_draws = np.random.binomial(1, p_control, n)\n",
        "        treatment_draws = np.random.binomial(1, p_treatment, n)\n",
        "        avg_diff = treatment_draws.mean() - control_draws.mean()\n",
        "        avg_diffs.append(avg_diff)\n",
        "    axes[i].hist(avg_diffs, bins=30, color='skyblue', edgecolor='black', alpha=0.7)\n",
        "    axes[i].axvline(0, color='red', linestyle='dashed', linewidth=2, label='Zero')\n",
        "    axes[i].axvline(p_treatment - p_control, color='green', linestyle='dashed', linewidth=2, label='True Diff')\n",
        "    axes[i].set_title(f'Sample Size = {n}')\n",
        "    axes[i].set_xlabel('Average Difference')\n",
        "    axes[i].set_ylabel('Frequency')\n",
        "    axes[i].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ec357e2f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Each histogram shows the distribution of average differences in donation rates between treatment and control groups, simulated 1000 times for different sample sizes. \n",
        "\n",
        "As the sample size increases, the distribution becomes narrower and more centered around the true difference (green line), and zero (red line) moves further into the tail. \n",
        "\n",
        "This illustrates the Central Limit Theorem: with larger samples, our estimate of the difference becomes more precise and less likely to include zero if there is a true effect.\n"
      ],
      "id": "25ae7da6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/weizhou/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}